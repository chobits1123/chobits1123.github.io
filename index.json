[
{
	"uri": "/",
	"title": "",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/array/",
	"title": "array",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/dynamic-programming/",
	"title": "dynamic programming",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/solutions/maximum-subarray/",
	"title": "Maximum Subarray",
	"tags": ["dynamic programming"],
	"categories": [],
	"series": [],
	"description": "",
	"content": "Description Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nExample:\nInput: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.\nFollow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\nDynamic Programming Solution Let $dp[i]$ to be the maximum subarray value that ends at $nums[i]$, which is all the possible subarray sum which ends at $i$, i.e.\n$$ \\begin{aligned} dp[i] \u0026amp;= \\max_{j \\in [0, i] } \\left\\lbrace \\sum\\limits_{k=j}^{i} nums[k] \\right\\rbrace \\\\ \u0026amp;= \\max_{j \\in [0, i] } \\left\\lbrace \\sum\\limits_{k=j}^{i-1} nums[k],0 \\right\\rbrace + nums[i] \\\\ \u0026amp;= \\max \\left\\lbrace dp[i-1], 0 \\right\\rbrace + nums[i] \\end{aligned} $$\n1 2 3 4 5 6 7  class Solution: def maxSubArray(self, nums: List[int]) -\u0026gt; int: dp, max_sum = [0]*len(nums), -float(\u0026#34;inf\u0026#34;) for i in range(len(nums)): dp[i] = (max(dp[i-1], 0) if i-1\u0026gt;=0 else 0) + nums[i] max_sum = max(max_sum, dp[i]) return max_sum   Notes\n When calculating dp[i-1], watch out for the corner case. Generate max_sum in each iter on the fly. "
},
{
	"uri": "/solutions/",
	"title": "Solution",
	"tags": ["index"],
	"categories": [],
	"series": [],
	"description": "Solution page",
	"content": ""
},
{
	"uri": "/categories/sum/",
	"title": "sum",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/parentheses/",
	"title": "parentheses",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/",
	"title": "Series",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/stack/",
	"title": "stack",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/string/",
	"title": "string",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/solutions/valid-parentheses/",
	"title": "Valid Parentheses",
	"tags": ["stack"],
	"categories": [],
	"series": ["parentheses"],
	"description": "",
	"content": "Description Given a string containing just the characters \u0026lsquo;(', \u0026lsquo;)', \u0026lsquo;{', \u0026lsquo;}', \u0026lsquo;[\u0026rsquo; and \u0026lsquo;]', determine if the input string is valid.\nAn input string is valid if:\n Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.  Note that an empty string is also considered valid.\nStack Solution Keep a stack\n When a ( arrives, push it into the stack When a ) arrives, compare it with the top of stack, if it forms a pair, pop it, else push it.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  class Solution: def isValid(self, s: str) -\u0026gt; bool: left_set = {\u0026#39;(\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;[\u0026#39;} right_set = {\u0026#39;)\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;]\u0026#39;} get_pair = { \u0026#39;)\u0026#39;: \u0026#39;(\u0026#39;, \u0026#39;}\u0026#39;: \u0026#39;{\u0026#39;, \u0026#39;]\u0026#39;: \u0026#39;[\u0026#39; } stack = [] for p in s: if p in left_set: stack.append(p) else: if stack and stack[-1] == get_pair[p]: stack.pop() else: stack.append(p) return len(stack) == 0   Notes\n We use a dict to check if the pair is valid. Watch out for corner case before indexig. Follow up "
},
{
	"uri": "/solutions/longest-valid-parentheses/",
	"title": "Longest Valid Parentheses",
	"tags": ["dynamic programming", "stack"],
	"categories": [],
	"series": ["parentheses"],
	"description": "",
	"content": "Description Given a string containing just the characters \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)', find the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nInput: \u0026quot;(()\u0026quot; Output: 2 Explanation: The longest valid parentheses substring is \u0026quot;()\u0026quot; Example 2:\nInput: \u0026quot;)()())\u0026quot; Output: 4 Explanation: The longest valid parentheses substring is \u0026quot;()()\u0026quot; Dynamic Programming Solution Let $dp[i]$ to be the length of the longest valid parentheses which ends at $i$'th position.\n $s[i]$ must be ) to have a valid parentheses, else $dp[i] = 0$\n Depends on s[i-1], we have 2 situations:\n $s[i-1] = ($     \u0026hellip; i-2 i-1 i     \u0026hellip; . ( )    dp[i-2] 0 dp[i]    dp[i] = dp[i-2] + 2 $s[i-1] = )$\nwe have 2 situations, only needs to consider $s[i-dp[i-1]-1] = ($     i-dp[i-1]-2 i-dp[i-1]-1 i-dp[i-1] \u0026hellip; i-1 i     ? ( ( \u0026hellip; ) )   dp[i-dp[i-1]-2] 0 0 \u0026hellip; dp[i-1] dp[i]    dp[i] = dp[i-dp[i-1]-2] + dp[i-1] + 2 Combining all the situations above, we have:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution: def longestValidParentheses(self, s: str) -\u0026gt; int: n = len(s) dp = [0]*n _max = 0 for i in range(n): if s[i] == \u0026#39;)\u0026#39; and (i-1\u0026gt;=0): if s[i-1] == \u0026#39;(\u0026#39;: dp[i] = (dp[i-2] if (i-2\u0026gt;=0) else 0) + 2 _max = max(_max, dp[i]) else: if (i-dp[i-1]-1\u0026gt;=0) and s[i-dp[i-1]-1] == \u0026#39;(\u0026#39;: dp[i] = dp[i-1] + 2 + (dp[i-dp[i-1]-2] if (i-dp[i-1]-2\u0026gt;=0) else 0) _max = max(_max, dp[i]) return _max   Though the DP solution is not quite intuitive for me.\nStack Solution Maintain a stack, which borrows the idea from Valid Parentheses\n When a ( arrives, push it into the stack When a ) arrives, compare it with the top of stack, if it forms a pair, pop it, else push it. After the whole process, the items left in the stack are those not having valid pairs. On the other side, other elements are valid pairs. We just need to find longest space between those elements in the stack. So we push index of the elements, instead of the element itself.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  class Solution: def longestValidParentheses(self, s: str) -\u0026gt; int: stack: List[int] = [] max_len: int = 0 for i in range(len(s)): if s[i] == \u0026#39;(\u0026#39;: stack.append(i) elif s[i] == \u0026#39;)\u0026#39;: if stack and s[stack[-1]] == \u0026#39;(\u0026#39;: stack.pop() last_not_paired = stack[-1] if stack else -1 max_len = max(max_len, i-last_not_paired) else: stack.append(i) return max_len   Notes\n We generate the max length on the fly. Each time a pair generated, we calculate space between current element and last element remains in the stack, which is the last index that has not been paired yet, which is the current length of the generated valid substring. Watch out for corner case: if the stack is empty, we cannot find last element that has not been pairs, just put -1 to it shoud be fine. "
},
{
	"uri": "/categories/pattern-matching/",
	"title": "pattern matching",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/solutions/longest-palindromic-substring/",
	"title": "Longest Palindromic Substring",
	"tags": ["dynamic programming"],
	"categories": [],
	"series": ["palindromic"],
	"description": "",
	"content": "Description Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\nExample 1:\nInput: \u0026quot;babad\u0026quot; Output: \u0026quot;bab\u0026quot; Note: \u0026quot;aba\u0026quot; is also a valid answer. Example 2:\nInput: \u0026quot;cbbd\u0026quot; Output: \u0026quot;bb\u0026quot; Dynamic Programming Solution Let dp[i][j] indicates that s[i:j+1] is a palindromic sequence, we have\n$$ dp[i][j] = \\begin{cases} True, \u0026amp; \\text{$i$ = $j$} \\\\ s[i] = s[j], \u0026amp; \\text{$j$ - $i$ = 1} \\\\ (s[i] = s[j]) \\ \\text{and} \\ dp[i+1][j-1], \u0026amp; \\text{$j$ - $i$ \u0026gt; 1} \\end{cases} $$\n dp[i][j] / dp[i+1][j-1] Filling order is as described below:\n   i\\j b a b a d     b 0 1 3 6 10   a  2 4 7 11   b   5 8 12   a    9 13   d     14    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Solution: def longestPalindrome(self, s: str) -\u0026gt; str: max_substr = \u0026#34;\u0026#34; dp = [[False]*len(s) for _ in range(len(s))] for j in range(len(s)): for i in range(j+1): if i == j: dp[i][j] = True elif j-i == 1: dp[i][j] = s[i] == s[j] else: dp[i][j] = (s[i] == s[j]) and dp[i+1][j-1] if dp[i][j] and j-i+1 \u0026gt; len(max_substr): max_substr = s[i:j+1] return max_substr   "
},
{
	"uri": "/series/palindromic/",
	"title": "palindromic",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/backtracking/",
	"title": "backtracking",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/regular-expression/",
	"title": "regular expression",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/solutions/wildcard-matching/",
	"title": "Wildcard Matching",
	"tags": ["dynamic programming", "backtracking"],
	"categories": [],
	"series": ["regular expression"],
	"description": "",
	"content": "Description Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \u0026lsquo;?\u0026rsquo; and \u0026lsquo;*'.\n \u0026lsquo;?\u0026rsquo; Matches any single character. \u0026lsquo;*\u0026rsquo; Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).  Note:\n s could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like ? or *.  Example 1:\nInput: s = \u0026quot;aa\u0026quot; p = \u0026quot;a\u0026quot; Output: false Explanation: \u0026quot;a\u0026quot; does not match the entire string \u0026quot;aa\u0026quot;. Example 2: Input: s = \u0026quot;aa\u0026quot; p = \u0026quot;*\u0026quot; Output: true Explanation: '*' matches any sequence. Backtracking Solution This is an easier version of Regular Expression Matching, since we don\u0026rsquo;t need to check character matching when we get a wildcard. The logic is:\nWe define search(si, pi) as the search function, which means if s[si:] is matched by p[pi:].\nFirst check if it is a wildcard: pi \u0026lt; len(p) and p[pi] == \u0026quot;*\u0026quot;\n If it is, match this or not: search(si+1, pi) or search(si, pi+1) If not, just match current character: si \u0026lt; len(s) and p[pi] in {s[si], \u0026quot;?\u0026quot;}  Search next level: search(si+1, pi+1)    1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def isMatch(self, s: str, p: str) -\u0026gt; bool: def search(si: int, pi: int) -\u0026gt; bool: if pi == len(p): return si == len(s) wildcard: bool = pi \u0026lt; len(p) and p[pi] == \u0026#34;*\u0026#34; if wildcard: return (si \u0026lt; len(s) and search(si+1, pi)) or search(si, pi+1) else: match: bool = si \u0026lt; len(s) and p[pi] in {s[si], \u0026#34;?\u0026#34;} return match and search(si+1, pi+1) return search(0, 0)   Again, it could be optimized through cache.\nDynamic Programming First we can construct state transision from the backtracking method. Jut let search(si, pi) to be dp[si][pi]\n1 2 3 4  dp[si][pi] \u0026lt;--dp[si][pi+1] ^ \\ | \\ dp[si+1][pi] dp[si+1][pi+1]    We have a (len(s) + 1, len(p) +1) matrix, the iteration order is described below. Starting from dp[len(s)][len(p)-1], we need to get dp[0][0] Set dp[len(s)][len(p)] = True, which indicates our backtracking terminal condition(find a match).     s\\p * a * b      a end    F   b     F   c     F   e     F   b     F       start T    1 2 3 4 5 6 7 8 9 10 11 12 13 14  class Solution: def isMatch(self, s: str, p: str) -\u0026gt; bool: dp: List[List[bool]] = [[False]*(len(p)+1) for _ in range(len(s)+1)] dp[len(s)][len(p)] = True for si in range(len(s), -1, -1): for pi in range(len(p)-1, -1, -1): wildcard: bool = pi \u0026lt; len(p) and p[pi] == \u0026#34;*\u0026#34; if wildcard: dp[si][pi] = (si \u0026lt; len(s) and dp[si+1][pi]) or dp[si][pi+1] else: match: bool = si \u0026lt; len(s) and p[pi] in {s[si], \u0026#34;?\u0026#34;} dp[si][pi] = match and dp[si+1][pi+1] return dp[0][0]   "
},
{
	"uri": "/solutions/optimize-recursion/",
	"title": "Optimize Recursion",
	"tags": [],
	"categories": [],
	"series": ["tools"],
	"description": "",
	"content": "We can easily optimize a recursion by using a cache, which loads calculated function calls during the recursion process.\ncode\rusage\r\r1 2 3 4 5 6 7 8 9 10 11  from functools import wraps def memo(func): cache = dict() @wraps(func) def wrap(*args): if args not in cache: cache[args] = func(*args) return cache[args] return wrap   \r Some conditional branches could be merged by and operator.\n1 2 3 4 5 6  @memo def fib(n: int) -\u0026gt; int: if n in {0, 1}: return 1 else: return fib(n-1) + fib(n-1)   \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"3d0276ed69f39b29\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r"
},
{
	"uri": "/categories/python/",
	"title": "python",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/tools/",
	"title": "tools",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/solutions/regular-expression-matching/",
	"title": "Regular Expression Matching",
	"tags": ["dynamic programming", "backtracking"],
	"categories": [],
	"series": ["regular expression"],
	"description": "",
	"content": "Description Given an input string (s) and a pattern (p), implement regular expression matching with support for \u0026lsquo;.\u0026rsquo; and \u0026lsquo;*'.\n'.' Matches any single character. '*' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). Note:\n s could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like . or *.  Example :\nInput: s = \u0026quot;aab\u0026quot; p = \u0026quot;a*b\u0026quot; Output: true Explanation: \u0026quot;a*\u0026quot; does not match the entire string \u0026quot;aa\u0026quot;. Backtracking Solution We define search(si, pi) as the search function, which means if s[si:] is matched by p[pi:].\nFirst we need to check if p[pi] is a wildcard: p[pi+1] == \u0026quot;*\u0026quot;, and don\u0026rsquo;t forget the corner case: pi+1 \u0026lt; len(p)\n Not wildcard: Just check if s[si] and p[pi] is same character: si \u0026lt; len(s) and s[si] == p[pi]  If it is, search next level: search(si+1, pi+1) If not, just return False, search ends here.   Wildcard: Same as step 1, check if it\u0026rsquo;s the same character:  If it is, that\u0026rsquo;s a valid wildcard match. But we could still choose to match or skip this wildcard: search(si+1, pi) or search(si, pi+2) If not, the only choice is to skip this wildcard: search(si, pi+2)    straight\rconcise\r\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Solution: def isMatch(self, s: str, p: str) -\u0026gt; bool: def search(si: int, pi: int) -\u0026gt; bool: if pi == len(p): return si == len(s) wildcard: bool = pi+1 \u0026lt; len(p) and p[pi+1] == \u0026#34;*\u0026#34; match: bool = si \u0026lt; len(s) and p[pi] in {s[si], \u0026#34;.\u0026#34;} if wildcard: if match: return search(si+1, pi) or search(si, pi+2) else: return search(si, pi+2) else: if march: search(si+1, pi+1) else: return False return search(0, 0)   \r Some conditional branches could be merged by and operator.\n1 2 3 4 5 6 7 8 9 10 11 12  class Solution: def isMatch(self, s: str, p: str) -\u0026gt; bool: def search(si: int, pi: int) -\u0026gt; bool: if pi == len(p): return si == len(s) wildcard: bool = pi+1 \u0026lt; len(p) and p[pi+1] == \u0026#34;*\u0026#34; match: bool = si \u0026lt; len(s) and p[pi] in {s[si], \u0026#34;.\u0026#34;} if wildcard: return (match and search(si+1, pi)) or search(si, pi+2) else: return match and search(si+1, pi+1) return search(0, 0)   \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"7a87f0e26b3ee08c\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r  The code could be easily optimized using a cache to avoid duplicate calculation. See Optimize Recursion in my blog. Always pay attention to corner cases in recursion. Below is an example for matching aab and c*a*ab, with the dicision tree of the backtracking search path.  graph TD; subgraph DecisionTree DROOT(Wildcard?)--\u0026gt;|Y|DL(char?); DL--\u0026gt;|Y|DLL(match?); DLL--\u0026gt;|Y|DLLL(si+1, pi); DLL--\u0026gt;|N|DLLR(si, pi+2); DL--\u0026gt;|N|DLR(si, pi+2); DROOT--\u0026gt;|N|DR(char?); DR--\u0026gt;|Y|DRL(si+1, pi+1); DR--\u0026gt;|N|DRR(False); end subgraph MatchExample ROOT(aab,c*a*ab)--\u0026gt;|skip c*|L(aab, a*ab); L--\u0026gt;|match a*|LL(ab,a*ab) L--\u0026gt;|skip a*|LR(aab,ab); LL--\u0026gt;|match a*|LLL(b,a*ab); LLL--\u0026gt;|skip a*|LLLL(b,ab); LL--\u0026gt;|skip a*|LLR(ab,ab); LR--\u0026gt;|match a|LRL(ab,b); LLR--\u0026gt;|match a|LLRL(b,b); LLRL--\u0026gt;|match b|LLRLL([END]); end Dyamic Programming First we can construct state transision from the backtracking method. Jut let search(si, pi) to be dp[si][pi]\n1 2 3 4  dp[si][pi] \u0026lt;--------------- dp[si][pi+2] ^ \\ | \\ dp[si+1][pi] dp[si+1][pi+1]    We have a (len(s) + 1, len(p) +1) matrix, the iteration order is described below. Starting from dp[len(s)][len(p)-1], we need to get dp[0][0] Set dp[len(s)][len(p)] = True, which indicates our backtracking terminal condition(find a match).     s\\p c * a * a b      a end      F   a       F   b       F         start T    The core logic is pretty straightforward like backtracking solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13  class Solution: def isMatch(self, s: str, p: str) -\u0026gt; bool: dp: List[List[bool]] = [[False]*(len(p)+1) for _ in range(len(s)+1)] dp[len(s)][len(p)] = True for si in range(len(s), -1, -1): for pi in range(len(p)-1, -1, -1): wildcard: bool = pi+1 \u0026lt; len(p) and p[pi+1] == \u0026#34;*\u0026#34; match: bool = si \u0026lt; len(s) and p[pi] in {s[si], \u0026#34;.\u0026#34;} if wildcard: dp[si][pi] = (match and dp[si+1][pi]) or dp[si][pi+2] else: dp[si][pi] = match and dp[si+1][pi+1] return dp[0][0]   "
},
{
	"uri": "/blogs/",
	"title": "Blogs",
	"tags": ["index"],
	"categories": [],
	"series": [],
	"description": "Blog page",
	"content": ""
},
{
	"uri": "/blogs/lib-guidance/",
	"title": "Library Support Guidance",
	"tags": ["markdown"],
	"categories": [],
	"series": ["Themes Guide"],
	"description": "Sample article showcasing test features like charts and latex equations.",
	"content": "MathJax  A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.\n When \\(a \\ne 0\\), there are two solutions to \\((ax^2 + bx + c = 0)\\) and they are \\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\]\nChartJS  Simple yet flexible JavaScript charting for designers \u0026amp; developers\n { \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } { \u0026quot;type\u0026quot;: \u0026quot;line\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [ { \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 2, 3], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;orange\u0026quot; }, { \u0026quot;label\u0026quot;: \u0026quot;Some other set\u0026quot;, \u0026quot;data\u0026quot;: [15, 8, 13, 5, 5, 9], \u0026quot;backgroundColor\u0026quot;:\u0026quot;transparent\u0026quot;, \u0026quot;borderColor\u0026quot;:\u0026quot;#44ccff\u0026quot; } ] } } FLowChart  flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.\n st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e JS Sequence Diagram support  Generates UML sequence diagrams from simple text\n Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow KaTex  KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.\n The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nMermaid  Generate diagrams, charts, graphs or flows from markdown-like text via javascript.\n graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026quot;Dogs\u0026quot; : 386 \u0026quot;Cats\u0026quot; : 85 \u0026quot;Rats\u0026quot; : 15 Wavedrom support  WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.\n { \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ]} "
},
{
	"uri": "/tags/markdown/",
	"title": "markdown",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/syntax/",
	"title": "syntax",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/series/themes-guide/",
	"title": "Themes Guide",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "",
	"content": ""
},
{
	"uri": "/blogs/basic/",
	"title": "Markdown Basic Syntax",
	"tags": ["markdown"],
	"categories": [],
	"series": ["Themes Guide"],
	"description": "Sample article showcasing basic Markdown syntax and formatting for HTML elements.",
	"content": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nEmoji Support Emoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }   Math TypeSetting We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544)  Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\n In this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nRich Content Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nShort Codes Markdownify box This is boxmd shortcode Simple box This is **box** shortcode  Code tabs Make it easy to switch between different code\njava\rjavascript\r\r1  System.out.println(\u0026#39;Hello World!\u0026#39;);   \r 1  console.log(\u0026#39;Hello World!\u0026#39;);   \r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"82c57f51dcab19aa\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar codetabLinks = null;\rvar codetabContents = null;\rvar ids = [];\rif (containerElem) {\rcodetabLinks = containerElem.querySelectorAll('.codetab__link');\rcodetabContents = containerElem.querySelectorAll('.codetab__content');\r}\rfor (var i = 0; i 0) {\rcodetabContents[0].style.display = 'block';\r}\r Tabs for general purpose Windows\rMacOS\rUbuntu\r\rWindows section 1  console.log(\u0026#39;Hello World!\u0026#39;);   ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\n MacOS section Hello world!\r Ubuntu section Great!\r \r\r'use strict';\rvar containerId = JSON.parse(\"\\\"f56fdfca46ff5502\\\"\");\rvar containerElem = document.getElementById(containerId);\rvar tabLinks = null;\rvar tabContents = null;\rvar ids = [];\rif (containerElem) {\rtabLinks = containerElem.querySelectorAll('.tab__link');\rtabContents = containerElem.querySelectorAll('.tab__content');\r}\rfor (var i = 0; i 0) {\rtabContents[0].style.display = 'block';\r}\r Expand \r\rExpand me\r\rTitle contents\r\r \r\rExpand me2\r\rTitle2 contents2\r\r Alert Colored box\nthis is a text\rthis is a text\rthis is a text\rthis is a text\rNotice success text\r info text\r warning text\r error text\r Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nDiff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;   CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }    The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  "
},
{
	"uri": "/archive/",
	"title": "Archive",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "Archive Page",
	"content": ""
},
{
	"uri": "/about/",
	"title": "About",
	"tags": [],
	"categories": [],
	"series": [],
	"description": "About xxuan.me backup site xxuan.cc",
	"content": "\n"
}]